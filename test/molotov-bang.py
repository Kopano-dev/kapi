"""
This is a simple Molotov https://molotov.readthedocs.io/ script to bang
the Kopano API server with various scenarios.
"""

from datetime import datetime, timedelta
import json
import os

import molotov


_API = os.environ.get('KAPID_URL', 'http://127.0.0.1:8039')
_GCAPI = '%s/api/gc/v1' % _API
_HEADERS = {
    'X-Request-With-Molotov': '1'
}
_ACCESS_TOKEN = os.environ.get('TOKEN_VALUE')


def last_day_of_month(any_day):
    next_month = any_day.replace(day=28) + timedelta(days=4)  # this will never fail
    return next_month - timedelta(days=next_month.day)


@molotov.global_setup()
def init_test(args):
    _HEADERS['Authorization'] = "Bearer %s" % _ACCESS_TOKEN
    me = molotov.json_request("%s/me" % _GCAPI, headers=_HEADERS)['content']
    molotov.set_var('me', me)


@molotov.setup()
async def init_worker(worker_num, args):
    return {'headers': _HEADERS}


@molotov.scenario(weight=5)
async def scenario_healthcheck(session):
    async with session.get("%s/health-check" % _API) as resp:
        assert resp.status == 200, "HTTP response status: %d" % resp.status


@molotov.scenario(weight=10)
async def scenario_gc_me(session):
    async with session.get("%s/me" % _GCAPI) as resp:
        assert resp.status == 200, "HTTP response status: %d" % resp.status
        res = await resp.json()
        assert res.get('@odata.context', '').endswith('/me')
        assert res.get('userPrincipalName', '') != ''


@molotov.scenario(weight=50)
async def scenario_gc_me_mailFolders(session):
    async with session.get("%s/me/mailFolders" % _GCAPI) as resp:
        assert resp.status == 200, "HTTP response status: %d" % resp.status
        res = await resp.json()
        assert res.get('@odata.context', '').endswith('/me/mailFolders')


@molotov.scenario(weight=50)
async def scenario_gc_me_messages(session):
    async with session.get("%s/me/messages" % _GCAPI) as resp:
        assert resp.status == 200, "HTTP response status: %d" % resp.status
        res = await resp.json()
        assert res.get('@odata.context', '').endswith('/me/messages')


@molotov.scenario(weight=20)
async def scenario_gc_me_calendar_calendarView(session):
    startDateTime = (datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0) - timedelta(days=1)).replace(day=1)
    endDateTime = last_day_of_month(datetime.now().replace(day=28, hour=0, minute=0, second=0, microsecond=0) + timedelta(days=4))

    async with session.get("%s/me/calendar/calendarView?startDateTime=%s&endDateTime=%s&$select=subject,isAllDay,start,end" % (_GCAPI, startDateTime.isoformat(), endDateTime.isoformat())) as resp:
        assert resp.status == 200, "HTTP response status: %d" % resp.status
        res = await resp.json()
        assert res.get('@odata.context', '').endswith('/me/calendar/calendarView')


@molotov.scenario(weight=30)
async def scenario_gc_me_sendMail(session):
    me = molotov.get_var('me')
    now = datetime.now()
    data = {
        'message': {
            'subject': 'Sent from Molotov (%s)' % now,
            'toRecipients': [
                {
                    'emailAddress': {
                        'name': me['userPrincipalName'],
                        'address': me['mail']
                    }
                }
            ],
            'body': {
                'contentType': 'text',
                'content': 'Lorem ipsum dolor sit amet, \n\nconsectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nGenerated by your trusted Molotov :)\n\n%s\n' % now
            }
        }
    }
    async with session.post("%s/me/sendMail" % _GCAPI, data=json.dumps(data)) as resp:
        assert resp.status == 202, "HTTP response status: %d" % resp.status
